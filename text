using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;

namespace MonoGame_S1
{
    // Enum för att definiera olika animationstillstånd
    public enum AnimationState
    {
        Idle,
        Walking,
        Jumping
    }

    interface IBaseComponent
    {
        void Update(GameTime gameTime);
        void Draw(SpriteBatch spriteBatch);
    }

    public class Vec2
    {
        public Vector2 position;
    }

    public class PlayerSpriteComponent : IBaseComponent
    {
        // Animation/Sprites
        public Texture2D Texture;
        public Vec2 Position;
        public Color Color;
        private int frameColumn = 0;
        private int frameRow = 0;
        private double timer = 0;
        private double switchTime = 200;
        private int frameWidth;
        private int frameHeight;

        // Lägg till en variabel för att hålla reda på nuvarande animationstillstånd
        private AnimationState currentAnimationState = AnimationState.Idle;
        private Vector2 movement;

        public PlayerSpriteComponent(Texture2D Texture, Vec2 position, Color Color)
        {
            this.Texture = Texture;
            this.Position = position;
            this.Color = Color;

            frameWidth = Texture.Width / 8;  // Antal kolumner i texturatlasen (t.ex. 8)
            frameHeight = Texture.Height / 8; // Antal rader i texturatlasen (t.ex. 8)
        }

        public void Update(GameTime gameTime)
        {
            UpdateMovement();
            UpdateAnimation(gameTime);
        }

        // Uppdatera spelarens rörelse och animationstillstånd
        private void UpdateMovement()
        {
            KeyboardState kState = Keyboard.GetState();
            movement = new Vector2(0, 0);

            if (kState.IsKeyDown(Keys.D))
            {
                movement.X = 1;
                currentAnimationState = AnimationState.Walking; // Byt till gå-animation
            }
            else if (kState.IsKeyDown(Keys.A))
            {
                movement.X = -1;
                currentAnimationState = AnimationState.Walking; // Byt till gå-animation
            }
            else
            {
                currentAnimationState = AnimationState.Idle; // Byt till idle-animation
            }

            if (kState.IsKeyDown(Keys.W))
            {
                currentAnimationState = AnimationState.Jumping; // Byt till hopp-animation
            }

            Position.position += movement * 5f; // Rörelsehastighet
        }

        // Uppdatera animationen baserat på nuvarande animationstillstånd
        private void UpdateAnimation(GameTime gameTime)
        {
            timer += gameTime.ElapsedGameTime.TotalMilliseconds;

            // Byt bildruta om det har gått tillräckligt med tid
            if (timer >= switchTime)
            {
                frameColumn++;
                if (frameColumn >= 4)  // Antal ramar i animationen per rad (t.ex. 4)
                    frameColumn = 0;

                timer = 0;
            }

            // Välj rätt rad beroende på animationstillstånd
            switch (currentAnimationState)
            {
                case AnimationState.Idle:
                    frameRow = 0;  // Idle animation är på rad 0
                    break;
                case AnimationState.Walking:
                    frameRow = 1;  // Walking animation är på rad 1
                    break;
                case AnimationState.Jumping:
                    frameRow = 2;  // Jumping animation är på rad 2
                    break;
            }
        }

        public Rectangle Rect
        {
            get
            {
                return new Rectangle((int)Position.position.X, (int)Position.position.Y, frameWidth, frameHeight);
            }
        }

        // Rita animationen baserat på nuvarande animationstillstånd
        public void Draw(SpriteBatch spriteBatch)
        {
            Rectangle sourceRectangle = new Rectangle(frameColumn * frameWidth, frameRow * frameHeight, frameWidth, frameHeight);

            int scale = 2;
            Rectangle destinationRectangle = new Rectangle((int)Position.position.X, (int)Position.position.Y, frameWidth * scale, frameHeight * scale);

            spriteBatch.Draw(Texture, destinationRectangle, sourceRectangle, Color);
        }
    }

    class MovementComponent : IBaseComponent
    {
        int Speed = 5;
        Player player;

        public MovementComponent(Player player)
        {
            this.player = player;
        }

        public void Update(GameTime gameTime)
        {
            KeyboardState kState = Keyboard.GetState();
            Vector2 movement = new Vector2(0, 0);
            if (kState.IsKeyDown(Keys.D))
            {
                movement.X = Speed;
            }
            if (kState.IsKeyDown(Keys.A))
            {
                movement.X = -Speed;
            }
            if (kState.IsKeyDown(Keys.W))
            {
                movement.Y = -Speed;
            }
            if (kState.IsKeyDown(Keys.S))
            {
                movement.Y = Speed;
            }

            player.Position += movement;
        }

        public void Draw(SpriteBatch spriteBatch) { }
    }
}
